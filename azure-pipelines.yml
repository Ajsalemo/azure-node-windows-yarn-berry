# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  # Runs with iisnode were tested with 'windows-latest'
  # This can also be set as 'ubuntu-latest' if wanting to deploy to a Linux App Service
  vmImageName: 'windows-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    # - script: |
    #     IF EXIST ".yarn/cache/" (
    #       echo ".yarn/cache checked in for 'Zero Installs', pushing cache and not running install.."
    #     ) ELSE IF NOT EXIST ".yarn/cache/" (
    #       corepack enable
    #       echo ".yarn/cache doesn't exist, running yarn set version and install.."
    #       echo "Setting yarn version to stable.."
    #       call yarn set version stable
    #       echo "Checking yarn version.."
    #       call yarn -v
    #       echo "Running yarn install.."
    #       call yarn install
    #     )
    #   displayName: 'Check for .yarn cache'

    - script: |
        echo "Running Yarn set stable.."
        yarn set version stable
      displayName: 'Set yarn version'

    - script: |
        echo "Running yarn install.."
        yarn install
        echo "Checking yarn version.."
        yarn -v
      displayName: 'Yarn install'

    - script: |
        echo "Checking yarn version.."
        yarn -v
      displayName: 'Check yarn version..'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      artifact: drop
      
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(webAppNameVar)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION_NAME)($(AZURE_SUBSCRIPTION_ID))'
              appType: 'webApp'
              appName: $(webAppNameVar)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              appSettings: '-NASA_API_KEY $(NASA_API_KEY_VAR)'
              deploymentMethod: 'auto'