# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  # Runs with iisnode were tested with 'windows-latest'
  # This can also be set as 'ubuntu-latest' if wanting to deploy to a Linux App Service
  vmImageName: 'windows-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - script: |
        # .yarn/cache/
        if test -f "$(YARN_CACHE)"; then
            echo "$(YARN_CACHE) exists, skipping installs"
        else
          echo "$(YARN_CACHE) doesn't exist, running set yarn version and installing.."
          echo "Setting stable yarn version.."
          yarn set stable version
          echo "Checking yarn version.."
          yarn -v
          echo "Running yarn install.."
          yarn install
        fi
      displayName: 'Check for .yarn cache'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      artifact: drop
      
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(webAppNameVar)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION_NAME)($(AZURE_SUBSCRIPTION_ID))'
              appType: 'webApp'
              appName: $(webAppNameVar)
              package: '$(System.DefaultWorkingDirectory)/**/*.zip'
              appSettings: '-NASA_API_KEY $(NASA_API_KEY_VAR)'
              deploymentMethod: 'auto'